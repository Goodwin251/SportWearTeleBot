import telebot
from telebot import types
import sqlite3
import os
from datetime import datetime

TOKEN = 'NO'
bot = telebot.TeleBot(TOKEN)

def init_db():
    if not os.path.exists('data'):
        os.makedirs('data')
        
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        phone TEXT,
        address TEXT,
        registration_date TIMESTAMP
    )
    ''')
    

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS products (
        product_id INTEGER PRIMARY KEY AUTOINCREMENT,
        category TEXT,
        name TEXT,
        description TEXT,
        price REAL,
        image_url TEXT
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS cart (
        cart_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        product_id INTEGER,
        quantity INTEGER,
        size TEXT,
        added_date TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(user_id),
        FOREIGN KEY (product_id) REFERENCES products(product_id)
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS orders (
        order_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        total_price REAL,
        status TEXT,
        order_date TIMESTAMP,
        delivery_address TEXT,
        phone TEXT,
        payment_method TEXT,
        FOREIGN KEY (user_id) REFERENCES users(user_id)
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS order_details (
        detail_id INTEGER PRIMARY KEY AUTOINCREMENT,
        order_id INTEGER,
        product_id INTEGER,
        quantity INTEGER,
        size TEXT,
        price REAL,
        FOREIGN KEY (order_id) REFERENCES orders(order_id),
        FOREIGN KEY (product_id) REFERENCES products(product_id)
    )
    ''')


    cursor.execute('SELECT COUNT(*) FROM products')
    count = cursor.fetchone()[0]
    
    if count == 0:
        products = [
            ('–§—É—Ç–±–æ–ª–∫–∏', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–∞ Nike Dri-FIT', '–ß–æ–ª–æ–≤—ñ—á–∞ —Ñ—É—Ç–±–æ–ª–∫–∞ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—î—é Dri-FIT', 899.99, 'nike_tshirt.jpg'),
            ('–§—É—Ç–±–æ–ª–∫–∏', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–∞ Adidas', '–ñ—ñ–Ω–æ—á–∞ —Ñ—É—Ç–±–æ–ª–∫–∞ –¥–ª—è –±—ñ–≥—É –∑ –≤–µ–Ω—Ç–∏–ª—è—Ü—ñ—î—é', 799.99, 'adidas_tshirt.jpg'),
            ('–®—Ç–∞–Ω–∏', '–°–ø–æ—Ä—Ç–∏–≤–Ω—ñ —à—Ç–∞–Ω–∏ Nike', '–ß–æ–ª–æ–≤—ñ—á—ñ —à—Ç–∞–Ω–∏ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑ –µ–ª–∞—Å—Ç–∏—á–Ω–∏–º –ø–æ—è—Å–æ–º', 1299.99, 'nike_pants.jpg'),
            ('–®—Ç–∞–Ω–∏', '–°–ø–æ—Ä—Ç–∏–≤–Ω—ñ –ª–µ–≥—ñ–Ω—Å–∏ Puma', '–ñ—ñ–Ω–æ—á—ñ –ª–µ–≥—ñ–Ω—Å–∏ –¥–ª—è —Ñ—ñ—Ç–Ω–µ—Å—É –≤–∏—Å–æ–∫–æ—ó –ø–æ—Å–∞–¥–∫–∏', 1099.99, 'puma_leggings.jpg'),
            ('–í–∑—É—Ç—Ç—è', '–ö—Ä–æ—Å—ñ–≤–∫–∏ –¥–ª—è –±—ñ–≥—É Nike Air Zoom', '–õ–µ–≥–∫—ñ –∫—Ä–æ—Å—ñ–≤–∫–∏ –∑ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü—ñ—î—é –¥–ª—è –±—ñ–≥—É', 3499.99, 'nike_shoes.jpg'),
            ('–í–∑—É—Ç—Ç—è', '–ö—Ä–æ—Å—ñ–≤–∫–∏ Adidas Ultraboost', '–ö—Ä–æ—Å—ñ–≤–∫–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Å—Ç–æ–ø–∏ –¥–ª—è —Ç—Ä–∏–≤–∞–ª–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å', 4299.99, 'adidas_shoes.jpg'),
            ('–ê–∫—Å–µ—Å—É–∞—Ä–∏', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞ —Å—É–º–∫–∞ Under Armour', '–ú—ñ—Å—Ç–∫–∞ —Å—É–º–∫–∞ –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è', 1499.99, 'ua_bag.jpg'),
            ('–ê–∫—Å–µ—Å—É–∞—Ä–∏', '–°–ø–æ—Ä—Ç–∏–≤–Ω—ñ —à–∫–∞—Ä–ø–µ—Ç–∫–∏ Nike (3 –ø–∞—Ä–∏)', '–ö–æ–º–ø–ª–µ–∫—Ç —à–∫–∞—Ä–ø–µ—Ç–æ–∫ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Å—Ç–æ–ø–∏', 399.99, 'nike_socks.jpg'),
        ]
        
        cursor.executemany('INSERT INTO products (category, name, description, price, image_url) VALUES (?, ?, ?, ?, ?)', products)
    
    conn.commit()
    conn.close()

init_db()

def register_user(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    
    if not user:
        cursor.execute('''
        INSERT INTO users (user_id, username, first_name, last_name, registration_date)
        VALUES (?, ?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name, datetime.now()))
        conn.commit()
    
    conn.close()

@bot.message_handler(commands=['start'])
def start(message):
    register_user(message)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item1 = types.KeyboardButton('üõç –ö–∞—Ç–∞–ª–æ–≥')
    item2 = types.KeyboardButton('üõí –ú—ñ–π –∫–æ—à–∏–∫')
    item3 = types.KeyboardButton('üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
    item4 = types.KeyboardButton('üë§ –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç')
    item5 = types.KeyboardButton('‚ùì –î–æ–ø–æ–º–æ–≥–∞')
    markup.add(item1, item2, item3, item4, item5)
    
    bot.send_message(
        message.chat.id,
        f"–í—ñ—Ç–∞—î–º–æ, {message.from_user.first_name}! üëã\n\n"
        f"–¶–µ –±–æ—Ç –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –æ–¥—è–≥—É. "
        f"–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é, —â–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É.",
        reply_markup=markup
    )

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(
        message.chat.id,
        "üìö *–î–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞—Ö:*\n\n"
        "/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞\n"
        "/catalog - –ü–µ—Ä–µ–≥–ª—è–¥ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä—ñ–≤\n"
        "/cart - –ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ—à–∏–∫–∞\n"
        "/orders - –ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–º–æ–≤–ª–µ–Ω—å\n"
        "/profile - –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç\n"
        "/help - –û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n\n"
        "–î–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '‚ùì –î–æ–ø–æ–º–æ–≥–∞' –≤ –º–µ–Ω—é.",
        parse_mode="Markdown"
    )

@bot.message_handler(commands=['catalog'])
def show_catalog(message):
    show_categories(message)

def show_categories(message):
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT DISTINCT category FROM products')
    categories = cursor.fetchall()
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    for category in categories:
        markup.add(types.InlineKeyboardButton(category[0], callback_data=f'category_{category[0]}'))
    
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main'))
    
    bot.send_message(
        message.chat.id,
        "üõç *–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤:*\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    
    conn.close()

@bot.message_handler(commands=['cart'])
def show_cart(message):
    user_id = message.from_user.id
    
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT products.name, cart.quantity, cart.size, products.price, cart.cart_id, products.product_id
    FROM cart
    JOIN products ON cart.product_id = products.product_id
    WHERE cart.user_id = ?
    ''', (user_id,))
    
    cart_items = cursor.fetchall()
    
    if not cart_items:
        bot.send_message(message.chat.id, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        conn.close()
        return
    
    total_price = 0
    cart_text = "üõí *–í–∞—à –∫–æ—à–∏–∫:*\n\n"
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    for i, (name, quantity, size, price, cart_id, product_id) in enumerate(cart_items, 1):
        item_total = quantity * price
        total_price += item_total
        
        cart_text += f"{i}. {name}\n"
        cart_text += f"   –†–æ–∑–º—ñ—Ä: {size}, –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {quantity}, –¶—ñ–Ω–∞: {price} –≥—Ä–Ω\n"
        cart_text += f"   –°—É–º–∞: {item_total:.2f} –≥—Ä–Ω\n\n"
        
        item_markup = types.InlineKeyboardMarkup(row_width=3)
        item_markup.add(
            types.InlineKeyboardButton("-", callback_data=f'decrease_{cart_id}'),
            types.InlineKeyboardButton(f"{quantity}", callback_data=f'quantity_{cart_id}'),
            types.InlineKeyboardButton("+", callback_data=f'increase_{cart_id}'),
            types.InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f'remove_{cart_id}')
        )
        
    cart_text += f"*–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_price:.2f} –≥—Ä–Ω*"
    
    markup.add(
        types.InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data='clear_cart'),
        types.InlineKeyboardButton("üì¶ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='checkout'),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')
    )
    
    bot.send_message(
        message.chat.id,
        cart_text,
        reply_markup=markup,
        parse_mode="Markdown"
    )
    
    conn.close()

@bot.message_handler(commands=['orders'])
def show_orders(message):
    user_id = message.from_user.id
    
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT order_id, total_price, status, order_date
    FROM orders
    WHERE user_id = ?
    ORDER BY order_date DESC
    ''', (user_id,))
    
    orders = cursor.fetchall()
    
    if not orders:
        bot.send_message(message.chat.id, "üì¶ –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        conn.close()
        return
    
    orders_text = "üì¶ *–í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n\n"
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    for order_id, total_price, status, order_date in orders:
        date_str = datetime.fromisoformat(order_date).strftime('%d.%m.%Y %H:%M')
        orders_text += f"*–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}*\n"
        orders_text += f"–î–∞—Ç–∞: {date_str}\n"
        orders_text += f"–°—É–º–∞: {total_price:.2f} –≥—Ä–Ω\n"
        orders_text += f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        markup.add(types.InlineKeyboardButton(f"üìù –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}", callback_data=f'order_details_{order_id}'))
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main'))
    
    bot.send_message(
        message.chat.id,
        orders_text,
        reply_markup=markup,
        parse_mode="Markdown"
    )
    
    conn.close()

@bot.message_handler(commands=['profile'])
def show_profile(message):
    user_id = message.from_user.id
    
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    
    if not user:
        bot.send_message(message.chat.id, "‚ùó –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        conn.close()
        return
    
    user_id, username, first_name, last_name, phone, address, registration_date = user
    
    profile_text = "üë§ *–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç*\n\n"
    profile_text += f"–Ü–º'—è: {first_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
    profile_text += f"–ü—Ä—ñ–∑–≤–∏—â–µ: {last_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
    profile_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
    profile_text += f"–ê–¥—Ä–µ—Å–∞: {address or '–ù–µ –≤–∫–∞–∑–∞–Ω–∞'}\n"
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üìù –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data='edit_phone'),
        types.InlineKeyboardButton("üìù –ó–º—ñ–Ω–∏—Ç–∏ –∞–¥—Ä–µ—Å—É", callback_data='edit_address'),
        types.InlineKeyboardButton("üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='show_orders'),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')
    )
    
    bot.send_message(
        message.chat.id,
        profile_text,
        reply_markup=markup,
        parse_mode="Markdown"
    )
    
    conn.close()

@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == 'üõç –ö–∞—Ç–∞–ª–æ–≥':
        show_categories(message)
    elif message.text == 'üõí –ú—ñ–π –∫–æ—à–∏–∫':
        show_cart(message)
    elif message.text == 'üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è':
        show_orders(message)
    elif message.text == 'üë§ –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç':
        show_profile(message)
    elif message.text == '‚ùì –î–æ–ø–æ–º–æ–≥–∞':
        help_command(message)
    else:
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    if call.data == 'back_to_main':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        start(call.message)
    
    elif call.data.startswith('category_'):
        category_name = call.data.split('_')[1]
        show_products_by_category(call.message, category_name)
    
    elif call.data.startswith('product_'):
        product_id = int(call.data.split('_')[1])
        show_product_details(call.message, product_id)
    
    elif call.data.startswith('add_to_cart_'):
        parts = call.data.split('_')
        product_id = int(parts[3])
        size = parts[4]
        add_to_cart(call.message, product_id, size)
        bot.answer_callback_query(call.id, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞")
    
    elif call.data.startswith('increase_'):
        cart_id = int(call.data.split('_')[1])
        change_cart_quantity(call.message, cart_id, 1)
        bot.answer_callback_query(call.id, "‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±—ñ–ª—å—à–µ–Ω–æ")
        show_cart(call.message)
    
    elif call.data.startswith('decrease_'):
        cart_id = int(call.data.split('_')[1])
        change_cart_quantity(call.message, cart_id, -1)
        bot.answer_callback_query(call.id, "‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º–µ–Ω—à–µ–Ω–æ")
        show_cart(call.message)
    
    elif call.data.startswith('remove_'):
        cart_id = int(call.data.split('_')[1])
        remove_from_cart(call.message, cart_id)
        bot.answer_callback_query(call.id, "‚úÖ –¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞")
        show_cart(call.message)

    elif call.data == 'clear_cart':
        clear_cart(call.message)
        bot.answer_callback_query(call.id, "‚úÖ –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
        bot.send_message(call.message.chat.id, "üßπ –í–∞—à –∫–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
    
    elif call.data == 'checkout':
        start_checkout(call.message)
        bot.answer_callback_query(call.id, "üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    
    elif call.data.startswith('order_details_'):
        order_id = int(call.data.split('_')[2])
        show_order_details(call.message, order_id)

    elif call.data == 'edit_phone':
        ask_for_phone(call.message)
        bot.answer_callback_query(call.id, "üì± –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")

    elif call.data == 'edit_address':
        ask_for_address(call.message)
        bot.answer_callback_query(call.id, "üìç –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É")

    elif call.data == 'show_orders':
        show_orders(call.message)
        bot.answer_callback_query(call.id, "üì¶ –í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")

def show_products_by_category(message, category_name):
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT product_id, name, price, description FROM products WHERE category = ?', (category_name,))
    products = cursor.fetchall()
    
    if not products:
        bot.send_message(message.chat.id, f"–£ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category_name}' –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")
        conn.close()
        return
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    for product_id, name, price, description in products:
        button_text = f"{name} - {price:.2f} –≥—Ä–Ω"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f'product_{product_id}'))
    
    markup.add(types.InlineKeyboardButton('üîô –î–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π', callback_data='back_to_categories'))
    
    bot.send_message(
        message.chat.id,
        f"üõç *–¢–æ–≤–∞—Ä–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category_name}'*\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    
    conn.close()

def show_product_details(message, product_id):
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT name, description, price, category, image_url FROM products WHERE product_id = ?', (product_id,))
    product = cursor.fetchone()
    
    if not product:
        bot.send_message(message.chat.id, "‚ùó –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        conn.close()
        return
    
    name, description, price, category, image_url = product
    
    product_text = f"*{name}*\n\n"
    product_text += f"*–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:* {category}\n"
    product_text += f"*–¶—ñ–Ω–∞:* {price:.2f} –≥—Ä–Ω\n\n"
    product_text += f"*–û–ø–∏—Å:*\n{description}\n"
    
    sizes = ["XS", "S", "M", "L", "XL", "XXL"]
    markup = types.InlineKeyboardMarkup(row_width=3)
    
    size_buttons = []
    for size in sizes:
        size_buttons.append(types.InlineKeyboardButton(size, callback_data=f'add_to_cart_{product_id}_{size}'))
    
    markup.add(*size_buttons)
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'category_{category}'))
    
    try:
        if os.path.exists(f'images/{image_url}'):
            with open(f'images/{image_url}', 'rb') as photo:
                bot.send_photo(
                    message.chat.id,
                    photo,
                    caption=product_text,
                    reply_markup=markup,
                    parse_mode="Markdown"
                )
        else:
            bot.send_message(
                message.chat.id,
                product_text + "\n\n*–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—à–∏–∫:*",
                reply_markup=markup,
                parse_mode="Markdown"
            )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            product_text + "\n\n*–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—à–∏–∫:*",
            reply_markup=markup,
            parse_mode="Markdown"
        )
    
    conn.close()

def add_to_cart(message, product_id, size):
    user_id = message.chat.id
    
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT cart_id, quantity FROM cart 
    WHERE user_id = ? AND product_id = ? AND size = ?
    ''', (user_id, product_id, size))
    
    existing_item = cursor.fetchone()
    
    if existing_item:
        cart_id, quantity = existing_item
        cursor.execute('''
        UPDATE cart SET quantity = quantity + 1 WHERE cart_id = ?
        ''', (cart_id,))
    else:
        cursor.execute('''
        INSERT INTO cart (user_id, product_id, quantity, size, added_date)
        VALUES (?, ?, ?, ?, ?)
        ''', (user_id, product_id, 1, size, datetime.now()))
    
    conn.commit()
    conn.close()

def change_cart_quantity(message, cart_id, change):
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT quantity FROM cart WHERE cart_id = ?', (cart_id,))
    current_quantity = cursor.fetchone()[0]
    
    new_quantity = current_quantity + change
    
    if new_quantity <= 0:
        cursor.execute('DELETE FROM cart WHERE cart_id = ?', (cart_id,))
    else:
        cursor.execute('UPDATE cart SET quantity = ? WHERE cart_id = ?', (new_quantity, cart_id))
    
    conn.commit()
    conn.close()

def remove_from_cart(message, cart_id):
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('DELETE FROM cart WHERE cart_id = ?', (cart_id,))
    
    conn.commit()
    conn.close()


def clear_cart(message):
    user_id = message.chat.id
    
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('DELETE FROM cart WHERE user_id = ?', (user_id,))
    
    conn.commit()
    conn.close()


def start_checkout(message):
    user_id = message.chat.id
    
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM cart WHERE user_id = ?', (user_id,))
    count = cursor.fetchone()[0]
    
    if count == 0:
        bot.send_message(message.chat.id, "‚ùó –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        conn.close()
        return
    
    cursor.execute('SELECT phone, address FROM users WHERE user_id = ?', (user_id,))
    user_data = cursor.fetchone()
    
    phone, address = user_data if user_data else (None, None)
    
    if not phone:
        ask_for_phone(message)
    elif not address:
        ask_for_address(message)
    else:
        confirm_order(message, phone, address)
    
    conn.close()

def ask_for_phone(message):
    msg = bot.send_message(
        message.chat.id,
        "üì± –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
        parse_mode="Markdown"
    )
    bot.register_next_step_handler(msg, process_phone_step)

def process_phone_step(message):
    user_id = message.from_user.id
    phone = message.text.strip()
    
    if len(phone) < 10:
        msg = bot.send_message(
            message.chat.id,
            "‚ùó –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä:"
        )
        bot.register_next_step_handler(msg, process_phone_step)
        return
    
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('UPDATE users SET phone = ? WHERE user_id = ?', (phone, user_id))
    conn.commit()
    
    cursor.execute('SELECT address FROM users WHERE user_id = ?', (user_id,))
    address = cursor.fetchone()[0]
    
    conn.close()
    
    if not address:
        ask_for_address(message)
    else:
        confirm_order(message, phone, address)
def ask_for_address(message):
    msg = bot.send_message(
        message.chat.id,
        "üìç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
        parse_mode="Markdown"
    )
    bot.register_next_step_handler(msg, process_address_step)

def process_address_step(message):
    user_id = message.from_user.id
    address = message.text.strip()
    
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('UPDATE users SET address = ? WHERE user_id = ?', (address, user_id))
    conn.commit()
    
    cursor.execute('SELECT phone FROM users WHERE user_id = ?', (user_id,))
    phone = cursor.fetchone()[0]
    
    conn.close()
    
    confirm_order(message, phone, address)

def confirm_order(message, phone, address):
    user_id = message.chat.id
    
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT products.name, cart.quantity, cart.size, products.price, products.product_id
    FROM cart
    JOIN products ON cart.product_id = products.product_id
    WHERE cart.user_id = ?
    ''', (user_id,))
    
    cart_items = cursor.fetchall()
    
    if not cart_items:
        bot.send_message(message.chat.id, "‚ùó –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        conn.close()
        return
        
    total_price = 0
    order_text = "üì¶ *–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*\n\n"
    
    for name, quantity, size, price, _ in cart_items:
        item_total = quantity * price
        total_price += item_total
        
        order_text += f"‚Ä¢ {name}\n"
        order_text += f"  –†–æ–∑–º—ñ—Ä: {size}, –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {quantity}, –¶—ñ–Ω–∞: {price:.2f} –≥—Ä–Ω\n"
        order_text += f"  –°—É–º–∞: {item_total:.2f} –≥—Ä–Ω\n\n"
    
    order_text += f"*–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_price:.2f} –≥—Ä–Ω*\n\n"
    order_text += f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
    order_text += f"*–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:* {address}\n\n"
    order_text += "–ë–∞–∂–∞—î—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?"
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data='confirm_order'),
        types.InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='cancel_order'),
        types.InlineKeyboardButton("üìù –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data='edit_phone'),
        types.InlineKeyboardButton("üìù –ó–º—ñ–Ω–∏—Ç–∏ –∞–¥—Ä–µ—Å—É", callback_data='edit_address')
    )
    
    bot.send_message(
        message.chat.id,
        order_text,
        reply_markup=markup,
        parse_mode="Markdown"
    )
    
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data == 'confirm_order')
def handle_confirm_order(call):
    user_id = call.message.chat.id
    
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute('SELECT phone, address FROM users WHERE user_id = ?', (user_id,))
        user_data = cursor.fetchone()
        
        if not user_data:
            bot.answer_callback_query(call.id, "‚ùó –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
            conn.close()
            return
            
        phone, address = user_data
        
        cursor.execute('''
        SELECT products.product_id, cart.quantity, cart.size, products.price
        FROM cart
        JOIN products ON cart.product_id = products.product_id
        WHERE cart.user_id = ?
        ''', (user_id,))
        
        cart_items = cursor.fetchall()
        
        if not cart_items:
            bot.answer_callback_query(call.id, "‚ùó –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
            conn.close()
            return
            
        total_price = sum(quantity * price for _, quantity, _, price in cart_items)
        
        cursor.execute('''
        INSERT INTO orders (user_id, total_price, status, order_date, delivery_address, phone, payment_method)
        VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (user_id, total_price, '–ù–æ–≤–µ', datetime.now(), address, phone, '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ'))
        
        order_id = cursor.lastrowid
        
        for product_id, quantity, size, price in cart_items:
            cursor.execute('''
            INSERT INTO order_details (order_id, product_id, quantity, size, price)
            VALUES (?, ?, ?, ?, ?)
            ''', (order_id, product_id, quantity, size, price))
        
        cursor.execute('DELETE FROM cart WHERE user_id = ?', (user_id,))
        
        conn.commit()
        
        success_text = (
            f"‚úÖ *–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!*\n\n"
            f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_price:.2f} –≥—Ä–Ω\n"
            f"–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ\n"
            f"–°—Ç–∞—Ç—É—Å: –ù–æ–≤–µ\n\n"
            f"–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
        )
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='show_orders'),
            types.InlineKeyboardButton("üõç –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", callback_data='back_to_main')
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=success_text,
            reply_markup=markup,
            parse_mode="Markdown"
        )
        
        bot.answer_callback_query(call.id, "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!")
    
    except Exception as e:
        print(f"Error processing order: {e}")
        bot.answer_callback_query(call.id, "‚ùó –ü–æ–º–∏–ª–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    
    finally:
        conn.close()

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_order')
def handle_cancel_order(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        parse_mode="Markdown"
    )
    bot.answer_callback_query(call.id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")

def show_order_details(message, order_id):
    user_id = message.chat.id
    
    conn = sqlite3.connect('data/sportscloth_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT order_id, total_price, status, order_date, delivery_address, phone, payment_method
    FROM orders
    WHERE order_id = ? AND user_id = ?
    ''', (order_id, user_id))
    
    order = cursor.fetchone()
    
    if not order:
        bot.send_message(message.chat.id, "‚ùó –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        conn.close()
        return
    
    order_id, total_price, status, order_date, delivery_address, phone, payment_method = order
    date_str = datetime.fromisoformat(order_date).strftime('%d.%m.%Y %H:%M')
    
    cursor.execute('''
    SELECT products.name, order_details.quantity, order_details.size, order_details.price
    FROM order_details
    JOIN products ON order_details.product_id = products.product_id
    WHERE order_details.order_id = ?
    ''', (order_id,))
    
    details = cursor.fetchall()
    
    order_text = f"üì¶ *–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}*\n\n"
    order_text += f"*–î–∞—Ç–∞:* {date_str}\n"
    order_text += f"*–°—Ç–∞—Ç—É—Å:* {status}\n"
    order_text += f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
    order_text += f"*–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:* {delivery_address}\n"
    order_text += f"*–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:* {payment_method}\n\n"
    
    order_text += "*–¢–æ–≤–∞—Ä–∏:*\n\n"
    
    for name, quantity, size, price in details:
        item_total = quantity * price
        order_text += f"‚Ä¢ {name}\n"
        order_text += f"  –†–æ–∑–º—ñ—Ä: {size}, –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {quantity}, –¶—ñ–Ω–∞: {price:.2f} –≥—Ä–Ω\n"
        order_text += f"  –°—É–º–∞: {item_total:.2f} –≥—Ä–Ω\n\n"
    
    order_text += f"*–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_price:.2f} –≥—Ä–Ω*"
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üîô –î–æ –∑–∞–º–æ–≤–ª–µ–Ω—å", callback_data='show_orders'),
        types.InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='back_to_main')
    )
    
    bot.send_message(
        message.chat.id,
        order_text,
        reply_markup=markup,
        parse_mode="Markdown"
    )
    
    conn.close()

if __name__ == '__main__':
    if not os.path.exists('images'):
        os.makedirs('images')
    
    bot.polling(none_stop=True)